Data1$fuhrman
Data1$multifocal
Data1$free_margin
Data1$other_cancer
source('~/.active-rstudio-document', echo=TRUE)
Data <- Data %>% filter(site == "Metastatic")
View(Data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(Data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(Data_full)
View(Data_full)
Data <- Data_full %>%
gather(H, Tissue, hmc_med_normal, hmc_med_tumor)
library(tidyr)
Data <- Data_full %>%
gather(H, Tissue, hmc_med_normal, hmc_med_tumor)
View(Data)
Data <- Data_full %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(H, Tissue, hmc_med_normal, hmc_med_tumor)
View(Data)
Data <- Data_full %>%
filter(site == "Primary") %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(H, Tissue, hmc_med_normal, hmc_med_tumor)
View(Data)
Data <- Data_full %>%
filter(site == "Primary") %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(H, Tissue, hmc_med_normal, hmc_med_tumor) %>%
factor(Tissue)
View(Data)
Data$Tissue
Data <- Data_full %>%
filter(site == "Primary") %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(H, Tissue, hmc_med_normal, hmc_med_tumor)
View(Data)
Data <- Data_full %>%
filter(site == "Primary") %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(Tissue, H, hmc_med_normal, hmc_med_tumor)
View(Data)
Data$Tissue
Data$Tissue <- factor(Data$Tissue, levels = c("Normal", "Tumor"))
View(Data)
filter(site == "Primary") %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(Tissue, H, hmc_med_normal, hmc_med_tumor) %>%
mutate(Tissue = ifelse(Tissue == "hmc_med_normal", "Normal", "Tumor"))
Data <- Data_full %>%
filter(site == "Primary") %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(Tissue, H, hmc_med_normal, hmc_med_tumor) %>%
mutate(Tissue = ifelse(Tissue == "hmc_med_normal", "Normal", "Tumor"))
View(Data)
str(Data)
Data <- Data_full %>%
filter(site == "Primary") %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(Tissue, H, hmc_med_normal, hmc_med_tumor) %>%
mutate(Tissue = factor(ifelse(Tissue == "hmc_med_normal", "Normal", "Tumor")))
View(Data)
str(Data)
source('~/.active-rstudio-document', echo=TRUE)
Data <- Data_full %>%
filter(site == "Primary") %>%
select(hmc_med_normal, hmc_med_tumor) %>%
gather(Tissue, H, hmc_med_normal, hmc_med_tumor) %>%
mutate(Tissue = factor(
ifelse(Tissue == "hmc_med_normal", "Normal", "Tumor")
)) %>%
mutate(p50 = factor(
ifelse(H > median(H), "High expression", "Low expression")
))
View(Data)
source('~/.active-rstudio-document', echo=TRUE)
View(Data)
View(Data)
with(Data, fisher.test(p50, Tissue))
with(Data, fisher.test(p50, Tissue))$p.value
View(Data_full)
View(Data)
View(Data)
View(Data_full)
View(Data)
Data_met <- Data_full %>%
filter(site == "Metastatic") %>%
select(hmc_med_tumor, p50, q3)
source('~/.active-rstudio-document', echo=TRUE)
View(Data_met)
Data_met <- Data_full %>%
filter(site == "Metastatic") %>%
select(hmc_med_tumor, p50, q3) %>%
mutate(Tissue = "Metastatic tumor")
View(Data_met)
View(Data)
Data_met <- Data_full %>%
filter(site == "Metastatic") %>%
select(hmc_med_tumor, p50, q3) %>%
mutate(Tissue = "Metastatic tumor") %>%
rename(H = hmc_med_tumor)
View(Data_met)
inner_join(Data_full, Data_met)
Data_NPM <- inner_join(Data_full, Data_met)
View(Data_NPM)
Data_NPM <- inner_join(Data, Data_met)
View(Data_NPM)
View(Data_met)
View(Data)
Data_NPM <- rbind(Data, Data_met)
View(Data_NPM)
View(Data_met)
Data_met <- Data_met[,c(4,1:3)]
View(Data_met)
View(Data)
Data_NPM <- rbind(Data, Data_met)
View(Data_NPM)
View(Data_NPM)
# P value
p <- with(Data_full, fisher.test(p50, site))$p.value
p <- format(p, digits = 2, scientific = TRUE, justify = "centre")
# Barplot
ggplot(Data_full, aes(x = site, fill = p50)) +
geom_bar(color = "black", position = position_dodge()) +
scale_y_continuous(limits = c(0, 45), breaks = seq(0, 45, 10)) +
ylab("No. patients") +
annotate("text", x = 1.5, y = 40,
label = paste("Fisher exact test \nP value =", p)) +
ggtitle("Comparison of 5hmC expression levels in \nprimary vs. metastatic tumors") +
gtheme + theme(legend.title = element_blank())
with(Data_full, descriptive.categorical.group(site, p50))
```{r Global, echo = FALSE, warning = FALSE, message = FALSE}
# Establishing global options
library(knitr)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(knitr.table.format = "markdown")
# Loading libraries and scripts
library(ggplot2)
library(dplyr)
library(tidyr)
library(simpleR)
library(stringr)
# Personalized ggplot2 theme
gtheme <- theme(
plot.title = element_text(size = 20, vjust = 1.5),
axis.title.x = element_text(vjust = -.5, size = 16),
axis.text.x = element_text(color = "black"),
axis.title.y = element_text(vjust = 1.5, size = 16),
axis.text.y = element_text(color = "black"),
legend.position = "bottom"
)
```
```{r Data}
# Loading the dataset
Data_full <- read.csv("DatasetKidney.csv")
# Fixing column names
colnames(Data_full) <- colnames(Data_full) %>%
str_replace_all("\\.", "_")
# Selecting clinicopathologic features and 5hmC expression
Data_full <- Data_full %>%
select(site:fu_months, starts_with("hmc"))
```
View(Data_full)
Data_full <- Data_full %>%
select(site:fu_months, starts_with("hmc_median"))
View(Data_full)
```{r Global, echo = FALSE, warning = FALSE, message = FALSE}
# Establishing global options
library(knitr)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(knitr.table.format = "markdown")
# Loading libraries and scripts
library(ggplot2)
library(dplyr)
library(tidyr)
library(simpleR)
library(stringr)
# Personalized ggplot2 theme
gtheme <- theme(
plot.title = element_text(size = 20, vjust = 1.5),
axis.title.x = element_text(vjust = -.5, size = 16),
axis.text.x = element_text(color = "black"),
axis.title.y = element_text(vjust = 1.5, size = 16),
axis.text.y = element_text(color = "black"),
legend.position = "bottom"
)
```
```{r Data}
# Loading the dataset
Data_full <- read.csv("DatasetKidney.csv")
# Fixing column names
colnames(Data_full) <- colnames(Data_full) %>%
str_replace_all("\\.", "_")
# Selecting clinicopathologic features and 5hmC expression
Data_full <- Data_full %>%
select(site:fu_months, starts_with("hmc_median"))
View(Data_full)
Data_full <- read.csv("DatasetKidney.csv")
View(Data_full)
colnames(Data_full) <- colnames(Data_full) %>%
str_replace_all("\\.", "_")
View(Data_full)
Data_full <- Data_full %>%
select(site:fu_months, starts_with("hmc_med"))
View(Data_full)
Data_full <- Data_full %>%
mutate(p50 = factor(
ifelse(hmc_med_tumor > median(hmc_med_tumor),
"High expression", "Low expression")
)) %>%
mutate(q3 = factor(
ifelse(hmc_med_tumor > quantile(hmc_med_tumor, .66),
"High expression", "Low expression")
))
View(Data_full)
```{r Global, echo = FALSE, warning = FALSE, message = FALSE}
# Establishing global options
library(knitr)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(knitr.table.format = "markdown")
# Loading libraries and scripts
library(ggplot2)
library(dplyr)
library(tidyr)
library(simpleR)
library(stringr)
# Personalized ggplot2 theme
gtheme <- theme(
plot.title = element_text(size = 20, vjust = 1.5),
axis.title.x = element_text(vjust = -.5, size = 16),
axis.text.x = element_text(color = "black"),
axis.title.y = element_text(vjust = 1.5, size = 16),
axis.text.y = element_text(color = "black"),
legend.position = "bottom"
)
```
For this section we will use 3 different approaches for evaluating the association of 5hmC and outcome: 1) using 5hmC H-scores; 2) categorizing 5hmC median expression in low/high levels using the median of the distribution as the cutoff point; 3) categorizing 5hmC median expression in low/high levels using the upper tertile of the distribution as the cutoff point. Primary and metastatic tumors will be analyzed separately.
```{r Data}
# Loading the dataset
Data_full <- read.csv("DatasetKidney.csv")
# Fixing column names
colnames(Data_full) <- colnames(Data_full) %>%
str_replace_all("\\.", "_")
# Selecting clinicopathologic features and 5hmC expression
Data_full <- Data_full %>%
select(site:fu_months, hmc_med_tumor)
# Creating categories
Data_full <- Data_full %>%
mutate(p50 = factor(
ifelse(hmc_med_tumor > median(hmc_med_tumor),
"High expression", "Low expression")
)) %>%
mutate(q3 = factor(
ifelse(hmc_med_tumor > quantile(hmc_med_tumor, .66),
"High expression", "Low expression")
))
View(Data_full)
View(Data_full)
View(Data_full)
Data_1 <- Data_full %>%
filter(site == "Primary")
View(Data_1)
Data_full <- Data_full %>%
mutate(age_group = ifelse(age > median(age), "Older", "Younger"))
View(Data_full)
Data_1 <- Data_full %>%
filter(site == "Primary")
View(Data_1)
source('~/.active-rstudio-document', echo=TRUE)
View(Data)
str(Data)
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
?barplot
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
colnames(Data)
source('~/.active-rstudio-document', echo=TRUE)
colnames(Data)
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
source('~/.active-rstudio-document', echo=TRUE)
View(Data)
source('~/.active-rstudio-document', echo=TRUE)
nlevels(Y)/2
nlevels(X)/2
X
Y
Data_G <- Data %>% select(q3, race) %>% filter(!is.na(race))
X <- Data_G[,2]
Y <- Data_G[,1]
X
nlevels(X)
nlevels(X)/2
Data_G <- select(Data$q3, Data$death)
Data_G <- select(Data, Data$q3, Data$death)
Data_G <- select(Data, Data[,"q3"], Data[,"death"])
Data[,"q3"]
Data[,q3]
Data[,"death"]
Data_G <- select(Data[,"q3"], Data[,"death"])
Data_G <- Data[,c("q3","death")]
View(Data_G)
V <- "death"
Data_G <- Data[,c(V,"death")]
View(Data_nona)
View(Data_G)
Data_G <- Data[,c("q3",V)]
View(Data_G)
O <- "dod"
V <- "q3"
Data_G <- Data[,c(V, O)]
View(Data_G)
?na.omit
Data_G <- na.omit(Data[,c(V, O)])
table(X, Y)
max(table(X, Y))
shiny::runApp('~/achaux@gmail.com/Data Science/Shiny/Data_Products')
# Establishing global options
library(knitr)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(knitr.table.format = "markdown")
# Loading libraries and scripts
library(ggplot2)
library(dplyr)
library(tidyr)
library(simpleR)
library(stringr)
library(grid)
# Personalized ggplot2 theme
gtheme <- theme(
plot.title = element_text(size = 20, vjust = 1.5),
axis.title.x = element_text(vjust = -.5, size = 16),
axis.text.x = element_text(color = "black"),
axis.title.y = element_text(vjust = 1.5, size = 16),
axis.text.y = element_text(color = "black"),
plot.margin = unit(c(3, 1, .5, .5), "lines")
)
```
```{r Plotting}
# Barplots
G_barplot <- function(){
Z <- max(table(X, Y)) + 4
W <- (nlevels(X)/2) + .5
P <- format(fisher.test(X, Y)$p.value, digits = 2, scientific = TRUE)
ggplot(Data_G, aes(x = X, fill = Y)) +
geom_bar(color = "black", position = position_dodge()) +
ylab("No. patients") +
scale_fill_discrete(name = "5hmC level") +
gtheme +
xlab("") +
scale_y_continuous(limits = c(0, Z), breaks = seq(0, Z, 10)) +
annotate("text", label = paste("P value =", P), x = W, y = Z) +
ggtitle(M) +
gtheme
}
# Table of factor by group
T_Factor <- function(){
Data_G <- na.omit(Data[,c(V, O)])
X <- Data_G[,2]
Y <- Data_G[,1]
descriptive.categorical.group(X, Y)
}
```
For this section we will use 3 different approaches for evaluating the association of 5hmC and outcome: 1) using 5hmC H-scores; 2) categorizing 5hmC median expression in low/high levels using the median of the distribution as the cutoff point; 3) categorizing 5hmC median expression in low/high levels using the upper tertile of the distribution as the cutoff point.
Outcomes will include tumor progression, overall mortality, and cancer-related mortality. This section includes only the analysis of metastatic tumors. Primary tumors are analyzed separately.
```{r Data}
# Load the dataset
Data_full <- read.csv("DatasetKidney.csv")
# Fix column names
colnames(Data_full) <- colnames(Data_full) %>%
str_replace_all("\\.", "_")
# Selecte clinicopathologic features and 5hmC expression
Data_full <- Data_full %>%
select(site:fu_months, hmc_med_tumor)
# Recoding fuhrman as factor
Data_full$fuhrman <- factor(Data_full$fuhrman, labels = c(
"Grade 1", "Grade 2", "Grade 3", "Grade 4"
))
# Create categories of 5hmC expression
Data_full <- Data_full %>%
mutate(p50 = factor(
ifelse(hmc_med_tumor > median(hmc_med_tumor),
"High expression", "Low expression")
)) %>%
mutate(q3 = factor(
ifelse(hmc_med_tumor > quantile(hmc_med_tumor, .66),
"High expression", "Low expression")
))
# Create age and size group categories
Data_full <- Data_full %>%
mutate(
age_group = factor(
ifelse(age > median(age, na.rm = TRUE),
"Above median age", "Below median age")
),
size_group = factor(
ifelse(size > median(size, na.rm = TRUE),
"Above median size", "Below median size")
)
)
Data <- Data_full %>%
filter(site == "Metastatic")
View(Data)
View(Data)
View(Data)
View(Data)
# Establishing global options
library(knitr)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
options(knitr.table.format = "markdown")
# Loading libraries and scripts
library(ggplot2)
library(ggfortify)
library(dplyr)
library(tidyr)
library(stringr)
library(grid)
# Personalized ggplot2 theme
gtheme <- theme(
plot.title = element_text(size = 20, vjust = 1.5),
axis.title.x = element_text(vjust = 0, size = 16),
axis.text.x = element_text(color = "black"),
axis.title.y = element_text(vjust = 1.5, size = 16),
axis.text.y = element_text(color = "black"),
legend.position = c(.9, .9),
legend.title = element_blank(),
plot.margin = unit(c(1.5, 1, 1.5, 1), "lines")
)
gsurv <- function(FU, outcome, status){
ht <- survdiff(Surv(FU, as.numeric(outcome)) ~ status)
p <- format(pchisq(ht$chisq, df = 1, lower.tail = FALSE), digits = 2)
fit <- survfit(Surv(FU, as.numeric(outcome)) ~ status)
autoplot(fit, conf.int = FALSE, censor = FALSE, surv.size = 1) +
ylab("Survival") +
xlab("Follow-up") +
annotate("text", label = paste("P =", p), x = 15, y = .05) +
scale_colour_discrete(labels = levels(status)) +
gtheme3
}
# Load the dataset
Data_full <- read.csv("DatasetKidney.csv")
# Fix column names
colnames(Data_full) <- colnames(Data_full) %>%
str_replace_all("\\.", "_")
# Selecte clinicopathologic features and 5hmC expression
Data_full <- Data_full %>%
select(site:fu_months, hmc_med_tumor)
# Recoding fuhrman as factor
Data_full$fuhrman <- factor(Data_full$fuhrman, labels = c(
"Grade 1", "Grade 2", "Grade 3", "Grade 4"
))
# Create categories of 5hmC expression
Data_full <- Data_full %>%
mutate(p50 = factor(
ifelse(hmc_med_tumor > median(hmc_med_tumor),
"High expression", "Low expression")
)) %>%
mutate(q3 = factor(
ifelse(hmc_med_tumor > quantile(hmc_med_tumor, .66),
"High expression", "Low expression")
))
# Create age and size group categories
Data_full <- Data_full %>%
mutate(
age_group = factor(
ifelse(age > median(age, na.rm = TRUE),
"Above median age", "Below median age")
),
size_group = factor(
ifelse(size > median(size, na.rm = TRUE),
"Above median size", "Below median size")
)
)
# Select only primary tumors
Data <- Data_full %>%
filter(site == "Primary")
Data <- droplevels(Data)
View(Data)
Data$fuhrman
as.numeric(Data$fuhrman)
table(Data$fuhrman)
table(as.numeric(Data$fuhrman))
Data$stage
table(Data$stage)
table(as.numeric(Data$stage))
